/*
number: Используется для представления числовых значений. Например: 5, 3.14.
string: Используется для представления текстовых значений. Строки могут быть заключены в одинарные ('), двойные (")
 или обратные кавычки (`). Например: 'Привет', "Мир".
boolean: Используется для представления логических значений true (истина) и false (ложь). Логические значения
 используются для условных операций и логических выражений.
null: Используется для представления отсутствия значения. Это явное присвоение переменной значения null.
undefined: Используется для представления переменных, которые не были инициализированы или не имеют значения.
symbol*: Используется для создания уникальных идентификаторов. Символы добавлены в JavaScript в стандарте ES6.
bigint*

object: Используется для представления сложных структур данных. Объекты могут содержать свойства и методы. Например:
 { name: 'John', age: 25 }.
array: Используется для представления упорядоченных коллекций элементов. Массивы могут содержать любые типы данных и
 доступны по индексу. Например: [1, 2, 3], ['apple', 'banana', 'orange'].
 */

// динамическая типизация
let str = '1'
str = 1

console.log(typeof str)

/*
Кроме обычных чисел, существуют так называемые «специальные числовые значения»,
которые относятся к этому типу данных: Infinity, -Infinity и NaN.
console.log(1 / 0)

Любая математическая операция с NaN возвращает NaN:

alert( NaN + 1 ); // NaN

Если где-то в математическом выражении есть NaN, то оно распространяется на весь результат
(есть только одно исключение: NaN ** 0 равно 1).

В JavaScript тип number не может безопасно работать с числами, большими,
чем (253-1) (т. е. 9007199254740991) или меньшими, чем -(253-1) для отрицательных чисел.

В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках.
Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».

Специальное значение undefined также стоит особняком. Оно формирует тип из самого себя так же, как и null.
Оно означает, что «значение не было присвоено».
Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined:
let age;
alert(age); // выведет "undefined"

Тип symbol (символ) используется для создания уникальных идентификаторов в объектах.

// Обычный синтаксис
typeof 5 // Выведет "number"
// Синтаксис, напоминающий вызов функции (встречается реже)
typeof(5) // Также выведет "number"

Если передается выражение, то нужно заключать его в скобки, т.к. typeof имеет более высокий приоритет, чем бинарные операторы:

typeof 50 + " Квартир"; // Выведет "number Квартир"
typeof (50 + " Квартир"); // Выведет "string"

typeof undefined // "undefined"
typeof 0 // "number"
typeof 10n // "bigint"
typeof true // "boolean"
typeof "foo" // "string"
typeof Symbol("id") // "symbol"
typeof Math // "object"  (1)
typeof null // "object"  (2)
typeof alert // "function"  (3)

Результатом вызова typeof null является "object". Это официально признанная ошибка в typeof,
ведущая начало с времён создания JavaScript и сохранённая для совместимости.
Конечно, null не является объектом. Это специальное значение с отдельным типом.
 */

